//
//  PokedexFavouriteListViewController.swift
//  PokeDex
//
//  Created by Fabrizio on 8/14/19.
//  Copyright (c) 2019 Fabrizio. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit
import Kingfisher

class PokedexFavouriteListViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var interactor: PokedexFavouriteListInteractor!
    var router: PokedexFavouriteListRouter!

    // MARK: - Object variables
    let refreshControl = UIRefreshControl()
    var favouritePokemonList = [String]()
    let userDefault = UserDefaults.standard
    
    // NOTE: Only store objects here if required
    private var displayedPokemons: [PokedexFavouriteListScene.FechtPokemon.ViewModel.DisplayedPokemon] = []

    // MARK: - Inteface objects

    @IBOutlet private weak var tableView: UITableView!
    // @IBOutlet private weak var somethingLabel: UILabel!

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        doFechtPokemon()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        doFechtPokemon(forced: false)
    }

    func setupView() {
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
        if #available(iOS 11.0, *) {
            self.navigationController?.navigationBar.prefersLargeTitles = true
        } else {
            // Fallback on earlier versions
        }
        
        if #available(iOS 10.0, *) {
            tableView.refreshControl = refreshControl
        } else {
            tableView.addSubview(refreshControl)
        }
        
        refreshControl.addTarget(self, action: #selector(refreshFavouriteList(_:)), for: .valueChanged)
        refreshControl.attributedTitle = NSAttributedString(string: "Buscando Favoritos", attributes: nil)
        
    }
    
    func setEmpty(label: UILabel) {
        self.tableView.backgroundView = label
        self.tableView.separatorStyle = .none
    }
    
    @objc private func respondToSwipeGesture(gesture: UIGestureRecognizer){
        if let swipeGesture = gesture as? UISwipeGestureRecognizer
        {
            switch swipeGesture.direction
            {
            case UISwipeGestureRecognizer.Direction.left:
                //write your logic for right swipe
                print("Swiped left")
                
            default:
                break
            }
        }
    }

    @objc private func refreshFavouriteList(_ sender: Any){
        doFechtPokemon()
    }
    
    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func doFechtPokemon(forced: Bool = true) {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        self.refreshControl.endRefreshing()
        interactor.doFechtPokemon(request: PokedexFavouriteListScene.FechtPokemon.Request(forced: forced))
    }

    // MARK: - Display logic

    func displayFechtPokemon(viewModel: PokedexFavouriteListScene.FechtPokemon.ViewModel) {
        // NOTE: Display the result from the Presenter
        // NOTE: Stop loading animation her
        displayedPokemons = viewModel.displayedPokemons
        tableView.reloadData()
    }


    // MARK: - TableView DataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if displayedPokemons.count > 0 {
            self.tableView.backgroundView = .none
            self.tableView.separatorStyle = .singleLine
            return displayedPokemons.count
        } else {
            TableViewHelper.EmptyMessage(message: "No tienes pokemones en favoritos", viewController: self)
            return displayedPokemons.count
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedPokemon = displayedPokemons[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: PokedexFavouriteListTableViewCell.identifier, for: indexPath) as! PokedexFavouriteListTableViewCell
        var detail = ""
        
        let id = "Id: \(displayedPokemon.id)"
        let name = "Name: \(displayedPokemon.name.capitalized)"
        
        var types = ""
        if displayedPokemon.types.count == 1 {
            types = "Type: \(displayedPokemon.types[0].capitalized)"
        } else {
            types = "Types: "
            displayedPokemon.types.forEach({
                types += $0.capitalized + " "})
        }
        
        detail = id + "\n\(name)" + "\n\(types)"
        cell.detailLabel.text = detail
        
        let url = URL(string: displayedPokemon.imageURL)
        cell.pokemonView.kf.indicatorType = .activity
        cell.pokemonView.kf.setImage(with: url)
        
//        if let url = URL(string:displayedPokemon.imageURL)
//        {
//            DispatchQueue.global().async {
//                if let data = try? Data( contentsOf:url)
//                {
//                    DispatchQueue.main.async {
//                        cell.pokemonView.image = UIImage( data:data)
//                    }
//                }
//            }
//        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        if let items = userDefault.array(forKey: "FavouritePokemon") as? [String] {
            favouritePokemonList = items
        }
        
        let deleteFavorito = UITableViewRowAction(style: .normal, title: "Delete") { (action, index) in
            
            let pokemon = self.displayedPokemons[index.row]
            let pokemonName = pokemon.name
            
            self.displayedPokemons = self.displayedPokemons.filter({ !($0.name == pokemonName) })
            self.favouritePokemonList = self.favouritePokemonList.filter({ !($0 == pokemonName) })
            
            self.userDefault.set(self.favouritePokemonList, forKey: "FavouritePokemon")
            
            tableView.deleteRows(at: [index], with: .fade)
        }
        return [deleteFavorito]
    }
    
    // MARK: - TableView Delegate Methods

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let pokemon = PokedexDetailViewControllerScene.FetchPokemon.Response(pokemonPost: PokemonDetail(id: displayedPokemons[indexPath.row].id, name: displayedPokemons[indexPath.row].name, imageUrl: displayedPokemons[indexPath.row].imageURL))
        router.navigateToSomewhere(pokemon: pokemon)
    }

}
