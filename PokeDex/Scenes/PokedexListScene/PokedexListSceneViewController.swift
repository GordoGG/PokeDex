//
//  PokedexListSceneViewController.swift
//  PokeDex
//
//  Created by Fabrizio on 6/6/19.
//  Copyright (c) 2019 Fabrizio. All rights reserved.
//
//  This file was generated by the StartApps CleanSwift Xcode Templates. V2.0
//  By Gabriel Lanata (http://StartApps.pe) with credit to http://clean-swift.com
//

import UIKit
import Kingfisher

class PokedexListSceneViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var interactor: PokedexListSceneInteractor!
    var router: PokedexListSceneRouter!

    // MARK: - Object variables

    let refreshControl = UIRefreshControl()
    
    // NOTE: Only store objects here if required
    private var displayedPokemons: [PokedexListSceneScene.FetchPokedex.ViewModel.DisplayedPokemon] = []

    // MARK: - Inteface objects
    
    @IBOutlet private weak var tableView: UITableView!
    // @IBOutlet private weak var somethingLabel: UILabel!

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        doFetchPokedex()
        
        tableView.rowHeight = UITableView.automaticDimension
//        tableView.estimatedRowHeight = 80
    }

    func setupView() {
        // NOTE: Setup the view on load
        // somethingLabel.textColor = UIColor.blue
        if #available(iOS 11.0, *) {
            self.navigationController?.navigationBar.prefersLargeTitles = true
        } else {
            // Fallback on earlier versions
        }
        
        if #available(iOS 10.0, *) {
            tableView.refreshControl = refreshControl
        } else {
            tableView.addSubview(refreshControl)
        }
        
        refreshControl.addTarget(self, action: #selector(refreshPokedex(_:)), for: .valueChanged)
        refreshControl.attributedTitle = NSAttributedString(string: "Buscando Pokemones", attributes: nil)
    }
    
    @objc private func refreshPokedex(_ sender: Any){
        doFetchPokedex()
    }
    
    // MARK: - Interaction handling

    // @IBAction func buttonPressed() { ...

    // MARK: - Event handling

    func doFetchPokedex() {
        // NOTE: Ask the Interactor to do some work
        // NOTE: Start loading animation here
        self.refreshControl.endRefreshing()
        interactor.doFetchPokedex(request: PokedexListSceneScene.FetchPokedex.Request())
    }

    // MARK: - Display logic

    func displayFetchPokedex(viewModel: PokedexListSceneScene.FetchPokedex.ViewModel) {
        guard let pokemons = viewModel.displayedPokemons else {
            let alert = UIAlertController(title: "Aviso", message: viewModel.error, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: nil ))
            alert.addAction(UIAlertAction(title: "Reintentar", style: .default, handler: { (_) in
                self.doFetchPokedex()
            }))
            self.present(alert, animated: true)
            return
        }
        displayedPokemons = pokemons
        tableView.reloadData()
    }

    // MARK: - TableView DataSource Methods

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedPokemons.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedPokemon = displayedPokemons[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: PokedexListSceneTableViewCell.identifier, for: indexPath) as! PokedexListSceneTableViewCell
        
        var detail = ""
        
        let id = "Id: \(displayedPokemon.id)"
        let name = "Name: \(displayedPokemon.name.capitalized)"
        
        var types = ""
        if displayedPokemon.types.count == 1 {
            types = "Type: \(displayedPokemon.types[0].capitalized)"
        } else {
            types = "Types: "
            displayedPokemon.types.forEach({
                types += $0.capitalized + " "})
        }
        
        detail = id + "\n\(name)" + "\n\(types)"
        cell.detailLabel.text = detail
        
        
        
        let url = URL(string:displayedPokemon.imageURL)
        cell.pokemonView.kf.indicatorType = .activity
        cell.pokemonView.kf.setImage(with: url)
        //{
        //    DispatchQueue.global().async {
        //        if let data = try? Data( contentsOf:url)
        //        {
        //            DispatchQueue.main.async {
        //                cell.pokemonView.image = UIImage( data:data)
        //            }
        //        }
        //    }
        //}
        
        return cell
    }

    // MARK: - TableView Delegate Methods

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let pokemon = PokedexDetailViewControllerScene.FetchPokemon.Response(pokemonPost: PokemonDetail(id: displayedPokemons[indexPath.row].id, name: displayedPokemons[indexPath.row].name, imageUrl: displayedPokemons[indexPath.row].imageURL))
        router.navigateToSomewhere(pokemon: pokemon)
    }

}
